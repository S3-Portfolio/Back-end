// <auto-generated />
using System;
using DiveSpot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiveSpot.Migrations
{
    [DbContext(typeof(DBcontext))]
    [Migration("20230525103904_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiveSpot.Entities.Dive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Depth")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaterId");

                    b.ToTable("Dive");
                });

            modelBuilder.Entity("DiveSpot.Entities.Fish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fish");
                });

            modelBuilder.Entity("DiveSpot.Entities.Water", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Water");
                });

            modelBuilder.Entity("FishWater", b =>
                {
                    b.Property<int>("fishId")
                        .HasColumnType("int");

                    b.Property<int>("waterId")
                        .HasColumnType("int");

                    b.HasKey("fishId", "waterId");

                    b.HasIndex("waterId");

                    b.ToTable("FishWater");
                });

            modelBuilder.Entity("DiveSpot.Entities.Dive", b =>
                {
                    b.HasOne("DiveSpot.Entities.Water", null)
                        .WithMany("dives")
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishWater", b =>
                {
                    b.HasOne("DiveSpot.Entities.Fish", null)
                        .WithMany()
                        .HasForeignKey("fishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiveSpot.Entities.Water", null)
                        .WithMany()
                        .HasForeignKey("waterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiveSpot.Entities.Water", b =>
                {
                    b.Navigation("dives");
                });
#pragma warning restore 612, 618
        }
    }
}
